/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as DoptApi from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { CompletionsStreamResponseStatus } from "./CompletionsStreamResponseStatus";
import { CompletionsStreamResponseContent } from "./CompletionsStreamResponseContent";
import { CompletionsStreamResponseAnswer } from "./CompletionsStreamResponseAnswer";

export const CompletionsStreamResponse: core.serialization.Schema<
    serializers.assistant.CompletionsStreamResponse.Raw,
    DoptApi.assistant.CompletionsStreamResponse
> = core.serialization
    .union("type", {
        status: CompletionsStreamResponseStatus,
        content: CompletionsStreamResponseContent,
        answer: CompletionsStreamResponseAnswer,
    })
    .transform<DoptApi.assistant.CompletionsStreamResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace CompletionsStreamResponse {
    type Raw = CompletionsStreamResponse.Status | CompletionsStreamResponse.Content | CompletionsStreamResponse.Answer;

    interface Status extends CompletionsStreamResponseStatus.Raw {
        type: "status";
    }

    interface Content extends CompletionsStreamResponseContent.Raw {
        type: "content";
    }

    interface Answer extends CompletionsStreamResponseAnswer.Raw {
        type: "answer";
    }
}
