/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as DoptApi from "../../../../../../api";
import * as core from "../../../../../../core";

export const CompletionsStreamResponse: core.serialization.Schema<
    serializers.assistant.CompletionsStreamResponse.Raw,
    DoptApi.assistant.CompletionsStreamResponse
> = core.serialization
    .union("type", {
        status: core.serialization.lazyObject(
            async () => (await import("../../../../..")).assistant.CompletionsStreamResponseStatus
        ),
        content: core.serialization.lazyObject(
            async () => (await import("../../../../..")).assistant.CompletionsStreamResponseContent
        ),
        answer: core.serialization.lazyObject(
            async () => (await import("../../../../..")).assistant.CompletionsStreamResponseAnswer
        ),
    })
    .transform<DoptApi.assistant.CompletionsStreamResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace CompletionsStreamResponse {
    type Raw = CompletionsStreamResponse.Status | CompletionsStreamResponse.Content | CompletionsStreamResponse.Answer;

    interface Status extends serializers.assistant.CompletionsStreamResponseStatus.Raw {
        type: "status";
    }

    interface Content extends serializers.assistant.CompletionsStreamResponseContent.Raw {
        type: "content";
    }

    interface Answer extends serializers.assistant.CompletionsStreamResponseAnswer.Raw {
        type: "answer";
    }
}
